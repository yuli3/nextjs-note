'use client'

import { useState, useEffect, useRef } from 'react'
import { useQueryState } from 'nuqs'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { toast } from 'sonner'
import { analyzeText } from '@/lib/text-utils'
import { Clipboard, FileUp, FilePlus, FileDown, Printer, Volume2, Book, AlignLeft, Type, MessageCircle, Clock, Twitter, Instagram, Facebook } from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

export function NoteEditor() {
  const [content, setContent] = useQueryState('content')
  const [fontSize, setFontSize] = useState('16')
  const [fontFamily, setFontFamily] = useState('sans')
  const textareaRef = useRef<HTMLTextAreaElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const textAnalysis = analyzeText(content || '')

  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto'
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`
    }
  }, [content])

  const handleExport = () => {
    const blob = new Blob([content || ''], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'note.txt'
    a.click()
    URL.revokeObjectURL(url)
    toast.success('Note exported successfully!')
  }

  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        setContent(e.target?.result as string)
        toast.success('Note imported successfully!')
      }
      reader.readAsText(file)
    }
  }

  const handlePrint = () => {
    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Print Note</title>
            <style>
              body { font-family: Arial, sans-serif; line-height: 1.6; }
              h1 { color: #333; }
            </style>
          </head>
          <body>
            <h1>Note</h1>
            <div>${content?.replace(/\n/g, '<br>') || ''}</div>
          </body>
        </html>
      `)
      printWindow.document.close()
      printWindow.print()
    }
  }

  const handleTextToSpeech = () => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(content || '')
      window.speechSynthesis.speak(utterance)
      toast.success('Text-to-speech started')
    } else {
      toast.error("Your browser doesn't support text-to-speech functionality.")
    }
  }

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(content || '').then(() => {
      toast.success('Copied to clipboard!')
    }).catch(() => {
      toast.error('Failed to copy')
    })
  }

  const handleSummarize = async () => {
    if (!content) {
      toast.error('Please enter some text to summarize')
      return
    }
    
    toast.promise(
      // This is a mock API call. In a real application, you would call your backend API here.
      new Promise((resolve) => setTimeout(resolve, 2000)),
      {
        loading: 'Generating summary...',
        success: () => {
          const summary = `This is a mock summary of your text. In a real application, 
          this would be generated by an AI model or a summarization algorithm.`
          setContent((prevContent) => `${prevContent}\n\nSummary:\n${summary}`)
          return 'Summary generated successfully!'
        },
        error: 'Failed to generate summary',
      }
    )
  }

  return (
    <div className="space-y-4">
      <div className="flex space-x-2">
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={() => setContent('')} variant="outline">
                <FilePlus className="w-4 h-4 mr-2" /> New
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>New Note</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={handleExport} variant="outline">
                <FileDown className="w-4 h-4 mr-2" /> Export
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Export Note</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={() => fileInputRef.current?.click()} variant="outline">
                <FileUp className="w-4 h-4 mr-2" /> Import
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Import Note</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <Input 
          type="file" 
          ref={fileInputRef} 
          onChange={handleImport} 
          className="hidden"
          accept=".txt"
        />
        
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={handlePrint} variant="outline">
                <Printer className="w-4 h-4 mr-2" /> Print
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Print Note</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={handleCopyToClipboard} variant="outline">
                <Clipboard className="w-4 h-4 mr-2" /> Copy
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Copy to Clipboard</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={handleTextToSpeech} variant="outline">
                <Volume2 className="w-4 h-4 mr-2" /> Read for me
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Read Aloud</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        
        {/* <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button onClick={handleSummarize} variant="outline">
                <AlignLeft className="w-4 h-4" />
              </Button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Summarize</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider> */}
      </div>
      <div className="flex space-x-2">
        <Select value={fontSize} onValueChange={setFontSize}>
          <SelectTrigger className="w-[100px]">
            <SelectValue placeholder="Select font size" />
          </SelectTrigger>
          <SelectContent>
            {['12', '14', '16', '18', '20', '24', '36'].map((size) => (
              <SelectItem key={size} value={size}>
                {size}px
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
        <Select value={fontFamily} onValueChange={setFontFamily}>
          <SelectTrigger className="w-[150px]">
            <SelectValue placeholder="Select font family" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="sans">Sans-serif</SelectItem>
            <SelectItem value="serif">Serif</SelectItem>
            <SelectItem value="mono">Monospace</SelectItem>
            <SelectItem value="Arial">Arial</SelectItem>
            <SelectItem value="Cosmic Sans MS">Cosmic Sans MS</SelectItem>
            <SelectItem value="Courier New">Courier New</SelectItem>
            <SelectItem value="Georgia">Georgia</SelectItem>
            <SelectItem value="Helvetica">Helvetica</SelectItem>
            <SelectItem value="Verdana">Verdana</SelectItem>
            <SelectItem value="Roboto">Roboto</SelectItem>
            <SelectItem value="Segoe UI">Segoe UI</SelectItem>
            <SelectItem value="-apple-system, BlinkMacSystemFont, system-ui">System Font</SelectItem>
            <SelectItem value="Times New Roman">Times New Roman</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <Textarea
        ref={textareaRef}
        value={content || ''}
        onChange={(e) => setContent(e.target.value)}
        placeholder="Start typing your note here..."
        className="min-h-[200px] resize-none"
        style={{
          fontSize: `${fontSize}px`,
          fontFamily: fontFamily === 'sans' ? 'sans-serif' : fontFamily === 'serif' ? 'serif' : 'monospace',
        }}
      />
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="flex items-center space-x-2">
          <Book className="w-4 h-4 text-blue-500" />
          <span>Words: {textAnalysis.wordCount}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Type className="w-4 h-4 text-green-500" />
          <span>Characters: {textAnalysis.characterCount}</span>
        </div>
        <div className="flex items-center space-x-2">
          <MessageCircle className="w-4 h-4 text-yellow-500" />
          <span>Sentences: {textAnalysis.sentenceCount}</span>
        </div>
        <div className="flex items-center space-x-2">
          <AlignLeft className="w-4 h-4 text-purple-500" />
          <span>Paragraphs: {textAnalysis.paragraphCount}</span>
        </div>
        <div className="flex items-center space-x-2">
          <Clock className="w-4 h-4 text-red-500" />
          <span>Reading time: {textAnalysis.readingTime} min</span>
        </div>
        <div className="flex items-center space-x-2">
          <Twitter className="w-4 h-4 text-blue-400" />
          <span>{280 - textAnalysis.characterCount} left</span>
        </div>
        <div className="flex items-center space-x-2">
          <Instagram className="w-4 h-4 text-pink-500" />
          <span>{2200 - textAnalysis.characterCount} left</span>
        </div>
        <div className="flex items-center space-x-2">
          <Facebook className="w-4 h-4 text-blue-600" />
          <span>{63206 - textAnalysis.characterCount} left</span>
        </div>
      </div>
    </div>
  )
}

